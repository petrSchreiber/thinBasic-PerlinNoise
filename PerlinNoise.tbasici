' See end of this file for Ken Perlin's Code that this is
' adapted from for thinBasic by kryton9 - Kent Sarikaya 2017

'#PROFILE On

Boolean debug = false  'debug off
'Boolean debug = true   'debug on

Int32 p ( 512 )
Int32 permutation ( 256 )

permutation ( 1 ) = 151,160,137,91,90,15,
   131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
   190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
   88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
   77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
   102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
   135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
   5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
   223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
   129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
   251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
   49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
   138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180   

Int32 i
For i = 1 To 256
    p ( i ) = permutation ( i )  
    p ( 256 + i ) = p ( i )
Next

Function fade ( t As Double ) As Double
   Function = t * t * t * ( t * ( t * 6 - 15 ) + 10 )
End Function 

'thinBasic has Lerp function, so named Perlin's lerp function to lerpp
'to make sure code matches his
Function Lerpp ( t As Double, a As Double, b As Double ) As Double
    Function =  a + ( t * (b - a) )
End Function      

'thinBasic has keyword Hash, so renamed to hsh here
Function grad ( hsh As Int32, x As Double, y As Double, z As Double ) As Double
    Int32 h = hsh And 15 
    DebugLog "h: " + h 
    Double u  
    If h < 8 Then 
        u = x 
        DebugLog "u = x" 
    Else 
        u = y
        DebugLog "u = y" 
    EndIf 
    
    'v = h<4 ? y : h==12||h==14 ? x : z; 
    Double v
    If h < 4 Then 
        v = y  
        DebugLog "v = y" 
    Else 
        v = z 
        DebugLog "v = z"
    EndIf 
    
    If h = 12 Or h = 14 Then 
        v = x
        DebugLog "v = x" 
    EndIf   
    
    Double retVal 
    'without parens gave no error, but did not work properly
    If (h And 1) = 0 Then
        retVal = u 
        DebugLog "h And 1 = 0   true"
    Else
        retVal = -u
        DebugLog "h And 1 = 0   false"
    EndIf
    
    'without parens gave no error, but did not work properly   
    If (h And 2) = 0 Then
        retVal = retVal + v  
        DebugLog "h And 2 = 0   true"
    Else
        retVal = retVal - v  
        DebugLog "h And 2 = 0   false"
    EndIf 
    
    Function = retVal
End Function 

Function noise ( x As Double, y As Double, z As Double ) As Double
    Int32 fX = Int ( x ) And 255 : DebugLog " fX: " + fX
    Int32 fY = Int ( y ) And 255 : DebugLog " fY: " + fY
    Int32 fZ = Int ( z ) And 255 : DebugLog " fZ: " + fZ
    x -= Int ( x ) : DebugLog " x: " + x
    y -= Int ( y ) : DebugLog " y: " + y
    z -= Int ( z ) : DebugLog " z: " + z
    
    Double u = fade ( x ) : DebugLog " u: " + u
    Double v = fade ( y ) : DebugLog " v: " + v
    Double w = fade ( z ) : DebugLog " w: " + w
    Int32  A = p ( fX + 1 ) + fY : DebugLog " A: " + A
    Int32 AA = p (  A + 1 ) + fZ : DebugLog "AA: " + AA
    Int32 AB = p (  A + 2 ) + fZ : DebugLog "AB: " + AB
    Int32  B = p ( fX + 2 ) + fY : DebugLog " B: " + B
    Int32 BA = p (  B + 1 ) + fZ : DebugLog "BA: " + BA
    Int32 BB = p (  B + 2 ) + fZ : DebugLog "BB: " + BB
    
    'having problems, so broke the code into readable parts
    DebugLog "going into ops"
    Double op1 = grad ( p ( AA + 1 ), x    , y    , z     ) : DebugLog "op1: " + op1
    Double op2 = grad ( p ( BA + 1 ), x - 1, y    , z     ) : DebugLog "op2: " + op2
    Double op3 = grad ( p ( AB + 1 ), x    , y - 1, z     ) : DebugLog "op3: " + op3
    Double op4 = grad ( p ( BB + 1 ), x - 1, y - 1, z     ) : DebugLog "op4: " + op4 
    Double op5 = grad ( p ( AA + 2 ), x    , y    , z - 1 ) : DebugLog "op5: " + op5
    Double op6 = grad ( p ( BA + 2 ), x - 1, y    , z - 1 ) : DebugLog "op6: " + op6
    Double op7 = grad ( p ( AB + 2 ), x    , y - 1, z - 1 ) : DebugLog "op7: " + op7
    Double op8 = grad ( p ( BB + 2 ), x - 1, y - 1, z - 1 ) : DebugLog "op8: " + op8   

    Function = Lerpp(w, Lerpp(v, Lerpp(u, op1, op2), Lerpp(u, op3, op4)),
                        Lerpp(v, Lerpp(u, op5, op6), Lerpp(u, op7, op8)))                        
End Function 

Function DebugLog(message As String)
  If debug Then PrintL message
End Function

/*  

// JAVA Reference IMPLEMENTATION OF IMPROVED NOISE - COPYRIGHT 2002 KEN PERLIN.

Public final Class ImprovedNoise {
   Static Public Double noise(Double x, Double y, Double z) {
      Int X = (Int)Math.floor(x) & 255,                  // FIND UNIT CUBE THAT
          Y = (Int)Math.floor(y) & 255,                  // Contains POINT.
          Z = (Int)Math.floor(z) & 255;
      x -= Math.floor(x);                                // FIND RELATIVE X,Y,Z
      y -= Math.floor(y);                                // OF POINT In CUBE.
      z -= Math.floor(z);
      Double u = fade(x),                                // COMPUTE FADE CURVES
             v = fade(y),                                // For Each OF X,Y,Z.
             w = fade(z);
      Int A = p[X  ]+Y, AA = p[A]+Z, AB = p[A+1]+Z,      // HASH COORDINATES OF
          B = p[X+1]+Y, BA = p[B]+Z, BB = p[B+1]+Z;      // THE 8 CUBE CORNERS,

      Return Lerp(w, Lerp(v, Lerp(u, grad(p[AA  ], x  , y  , z   ),  // And Add
                                     grad(p[BA  ], x-1, y  , z   )), // BLENDED
                             Lerp(u, grad(p[AB  ], x  , y-1, z   ),  // RESULTS
                                     grad(p[BB  ], x-1, y-1, z   ))),// FROM  8
                     Lerp(v, Lerp(u, grad(p[AA+1], x  , y  , z-1 ),  // CORNERS
                                     grad(p[BA+1], x-1, y  , z-1 )), // OF CUBE
                             Lerp(u, grad(p[AB+1], x  , y-1, z-1 ),
                                     grad(p[BB+1], x-1, y-1, z-1 ))));
   }
   Static Double fade(Double t) { Return t * t * t * (t * (t * 6 - 15) + 10); }
   Static Double Lerp(Double t, Double a, Double b) { Return a + t * (b - a); }
   Static Double grad(Int HASH, Double x, Double y, Double z) {
      Int h = HASH & 15;                      // CONVERT LO 4 BITS OF HASH CODE
      Double u = h<8 ? x : y,                 // InTo 12 Gradient DIRECTIONS.
             v = h<4 ? y : h==12||h==14 ? x : z;
      Return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);
   }
   Static final Int p[] = New Int[512], permutation[] = { 151,160,137,91,90,15,
   131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
   190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
   88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
   77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
   102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
   135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
   5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
   223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
   129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
   251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
   49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
   138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
   };
   Static { For (Int i=0; i < 256 ; i++) p[256+i] = p[i] = permutation[i]; }
}

*/